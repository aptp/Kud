// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package github

import (
	"context"
	"sync"
	"time"
)

var (
	lockGitHubRepositoryMockGetContributions sync.RWMutex
)

// GitHubRepositoryMock is a mock implementation of GitHubRepository.
//
//     func TestSomethingThatUsesGitHubRepository(t *testing.T) {
//
//         // make and configure a mocked GitHubRepository
//         mockedGitHubRepository := &GitHubRepositoryMock{
//             GetContributionsFunc: func(ctx context.Context, userName string, from time.Time, to time.Time) ([]int, error) {
// 	               panic("mock out the GetContributions method")
//             },
//         }
//
//         // use mockedGitHubRepository in code that requires GitHubRepository
//         // and then make assertions.
//
//     }
type GitHubRepositoryMock struct {
	// GetContributionsFunc mocks the GetContributions method.
	GetContributionsFunc func(ctx context.Context, userName string, from time.Time, to time.Time) ([]int, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetContributions holds details about calls to the GetContributions method.
		GetContributions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserName is the userName argument value.
			UserName string
			// From is the from argument value.
			From time.Time
			// To is the to argument value.
			To time.Time
		}
	}
}

// GetContributions calls GetContributionsFunc.
func (mock *GitHubRepositoryMock) GetContributions(ctx context.Context, userName string, from time.Time, to time.Time) ([]int, error) {
	if mock.GetContributionsFunc == nil {
		panic("GitHubRepositoryMock.GetContributionsFunc: method is nil but GitHubRepository.GetContributions was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		UserName string
		From     time.Time
		To       time.Time
	}{
		Ctx:      ctx,
		UserName: userName,
		From:     from,
		To:       to,
	}
	lockGitHubRepositoryMockGetContributions.Lock()
	mock.calls.GetContributions = append(mock.calls.GetContributions, callInfo)
	lockGitHubRepositoryMockGetContributions.Unlock()
	return mock.GetContributionsFunc(ctx, userName, from, to)
}

// GetContributionsCalls gets all the calls that were made to GetContributions.
// Check the length with:
//     len(mockedGitHubRepository.GetContributionsCalls())
func (mock *GitHubRepositoryMock) GetContributionsCalls() []struct {
	Ctx      context.Context
	UserName string
	From     time.Time
	To       time.Time
} {
	var calls []struct {
		Ctx      context.Context
		UserName string
		From     time.Time
		To       time.Time
	}
	lockGitHubRepositoryMockGetContributions.RLock()
	calls = mock.calls.GetContributions
	lockGitHubRepositoryMockGetContributions.RUnlock()
	return calls
}
